name: CI Validation

on:
  push:
    branches: [ main, feature/* ]
  pull_request:
    branches: [ main ]

env:
  GO_VERSION: "1.25"

jobs:
  validate-commits:
    name: Validate Conventional Commits
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Commitlint
        uses: wagoid/commitlint-github-action@v6
        with:
          configFile: .commitlintrc.json

  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Go linting
        uses: dagger/dagger-for-github@v7
        with:
          version: "latest"
          module: "github.com/sagikazarmark/daggerverse/go@v0.9.0"
          call: "exec --src=. --args=go,run,github.com/golangci/golangci-lint/cmd/golangci-lint@latest,run"

      - name: Run Go tests
        uses: dagger/dagger-for-github@v7
        with:
          version: "latest"
          module: "github.com/sagikazarmark/daggerverse/go@v0.9.0"
          call: "exec --src=. --args=go,test,./...,--coverprofile=coverage.out,--race,--short"

      - name: Run vulnerability scan with govulncheck
        uses: dagger/dagger-for-github@v7
        with:
          version: "latest"
          module: "github.com/sagikazarmark/daggerverse/go@v0.9.0"
          call: "exec --src=. --args=go,run,golang.org/x/vuln/cmd/govulncheck@latest,./..."


      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.out
          retention-days: 30

  build-test:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64
          - darwin/amd64
          - darwin/arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set platform variables
        id: platform
        run: |
          PLATFORM="${{ matrix.platform }}"
          OS=$(echo $PLATFORM | cut -d'/' -f1)
          ARCH=$(echo $PLATFORM | cut -d'/' -f2)
          echo "os=$OS" >> $GITHUB_OUTPUT
          echo "arch=$ARCH" >> $GITHUB_OUTPUT
          echo "binary_name=server-$OS-$ARCH" >> $GITHUB_OUTPUT

      - name: Build Go binary
        uses: dagger/dagger-for-github@v7
        with:
          version: "latest"
          module: "github.com/sagikazarmark/daggerverse/go@v0.9.0"
          call: >-
            with-platform --platform=${{ matrix.platform }}
            with-cgo-disabled
            build
            --source=.
            --pkg=./server
            --ldflags="-w -s"
            export --path=./bin/${{ steps.platform.outputs.binary_name }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.platform.outputs.binary_name }}
          path: ./bin/
          retention-days: 7

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [lint-and-test]
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: image_gallery_test
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
          POSTGRES_HOST_AUTH_METHOD: trust
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      valkey:
        image: valkey/valkey:7-alpine
        options: >-
          --health-cmd "valkey-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 5
        ports:
          - 6379:6379

      minio:
        image: minio/minio:latest
        env:
          MINIO_ROOT_USER: minioadmin
          MINIO_ROOT_PASSWORD: minioadmin
        options: >-
          --health-cmd "curl -f http://localhost:9000/minio/health/live"
          --health-interval 30s
          --health-timeout 20s
          --health-retries 3
        ports:
          - 9000:9000
          - 9001:9001

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Wait for services
        run: |
          sleep 10
          docker ps

      - name: Run integration tests
        uses: dagger/dagger-for-github@v7
        with:
          version: "latest"
          module: "github.com/sagikazarmark/daggerverse/go@v0.9.0"
          call: >-
            with-env-variable DATABASE_URL "postgres://testuser:testpass@localhost:5432/image_gallery_test?sslmode=disable"
            with-env-variable STORAGE_ENDPOINT "localhost:9000"
            with-env-variable STORAGE_ACCESS_KEY "minioadmin"
            with-env-variable STORAGE_SECRET_KEY "minioadmin"
            with-env-variable STORAGE_BUCKET "images"
            with-env-variable STORAGE_USE_SSL "false"
            with-env-variable STORAGE_REGION "us-east-1"
            with-env-variable CACHE_ENABLED "true"
            with-env-variable CACHE_ADDRESS "localhost:6379"
            with-env-variable CACHE_PASSWORD ""
            with-env-variable CACHE_DATABASE "0"
            with-env-variable CACHE_DEFAULT_TTL "1h"
            exec --src=. --version=${{ env.GO_VERSION }} --args=go,test,./internal/services/integrationtests/...,--v

  # Status check for required validation
  ci-success:
    name: CI Validation Complete
    runs-on: ubuntu-latest
    needs: [validate-commits, lint-and-test, build-test, integration-test]
    if: always()
    steps:
      - name: Check CI Status
        run: |
          # Check if commit validation was skipped (not a PR) or passed
          COMMIT_VALIDATION_OK="true"
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            if [[ "${{ needs.validate-commits.result }}" != "success" ]]; then
              COMMIT_VALIDATION_OK="false"
            fi
          fi

          if [[ "$COMMIT_VALIDATION_OK" == "true" && \
                "${{ needs.lint-and-test.result }}" == "success" && \
                "${{ needs.build-test.result }}" == "success" && \
                "${{ needs.integration-test.result }}" == "success" ]]; then
            echo "✅ All CI validation checks passed!"
            exit 0
          else
            echo "❌ Some CI validation checks failed:"
            if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "  - Validate Commits: ${{ needs.validate-commits.result }}"
            fi
            echo "  - Lint and Test: ${{ needs.lint-and-test.result }}"
            echo "  - Build Test: ${{ needs.build-test.result }}"
            echo "  - Integration Test: ${{ needs.integration-test.result }}"
            exit 1
          fi
