name: Build and Push

on:
  push:
    branches: [ main ]
  workflow_run:
    workflows: ["CI Validation"]
    branches: [ main ]
    types: [completed]

env:
  GO_VERSION: "1.25"
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Only run if CI validation succeeded or this is a direct push to main
  check-ci:
    name: Check CI Status
    runs-on: ubuntu-latest
    outputs:
      proceed: ${{ steps.check.outputs.proceed }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if we should proceed
        id: check
        run: |
          # Check if this is a release commit (skip if release-please is handling it)
          if git log -1 --pretty=format:"%s" | grep -E "^(chore|release).*release"; then
            echo "Release commit detected - skipping to avoid duplicate images"
            echo "proceed=false" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            echo "Direct push to main - proceeding"
            echo "proceed=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event.workflow_run.conclusion }}" == "success" ]]; then
            echo "CI validation succeeded - proceeding"
            echo "proceed=true" >> $GITHUB_OUTPUT
          else
            echo "CI validation failed or not completed - skipping"
            echo "proceed=false" >> $GITHUB_OUTPUT
          fi

  goreleaser-build:
    name: Build and Push with GoReleaser
    runs-on: ubuntu-latest
    needs: [check-ci]
    if: needs.check-ci.outputs.proceed == 'true'
    permissions:
      contents: read
      packages: write
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # GoReleaser needs full git history

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build binaries and containers with GoReleaser
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --snapshot --clean --skip=validate
        env:
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REPOSITORY_OWNER: ${{ github.repository_owner }}
          GITHUB_REPOSITORY_NAME: ${{ github.event.repository.name }}
          DOCKER_BUILDKIT: 1

      - name: Generate SBOM
        run: |
          echo "📋 Generating Software Bill of Materials..."
          # Note: This would be enhanced with actual SBOM generation
          echo "SBOM generation placeholder - consider integrating syft or similar tools"

  security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: [goreleaser-build]
    if: always() && needs.goreleaser-build.result == 'success'
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Dagger
        uses: dagger/dagger-for-github@v7
        with:
          version: "latest"

      - name: Run Trivy container security scan (SARIF)
        uses: dagger/dagger-for-github@v7
        with:
          version: "latest"
          module: "github.com/jpadams/daggerverse/trivy@v0.6.0"
          call: "scan-image --image-ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} --severity=HIGH,CRITICAL --format=sarif"

      - name: Upload Trivy scan results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-results.sarif

      - name: Run Trivy container scan (table format for logs)
        uses: dagger/dagger-for-github@v7
        with:
          version: "latest"
          module: "github.com/jpadams/daggerverse/trivy@v0.6.0"
          call: "scan-image --image-ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} --severity=HIGH,CRITICAL --format=table"

      - name: Run Trivy container scan (JSON for artifact)
        uses: dagger/dagger-for-github@v7
        with:
          version: "latest"
          module: "github.com/jpadams/daggerverse/trivy@v0.6.0"
          call: "scan-image --image-ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} --severity=HIGH,CRITICAL --format=json"

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            trivy-results.sarif
            trivy-results.json
          retention-days: 30

  # Release artifacts (optional - for future use)
  release-artifacts:
    name: Create Release Artifacts
    runs-on: ubuntu-latest
    needs: [goreleaser-build, security-scan]
    if: always() && needs.goreleaser-build.result == 'success'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts from CI
        uses: actions/download-artifact@v4
        with:
          pattern: server-*
          path: ./artifacts/
          merge-multiple: true

      - name: Create release summary
        run: |
          cat > release-notes.md << EOF
          # Image Gallery Release

          **Build**: \`${{ github.sha }}\`
          **Date**: \`$(date -u +%Y-%m-%dT%H:%M:%SZ)\`
          **Go Version**: \`${{ env.GO_VERSION }}\`

          ## Container Images
          - \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}\`
          - \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest\`

          ## Platforms
          - linux/amd64
          - linux/arm64

          ## Security
          - ✅ Vulnerability scanning completed
          - ✅ Container security scan passed
          - ✅ Distroless base image

          Generated by GitHub Actions
          EOF

      - name: Upload release notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release-notes.md
          retention-days: 90

  # Success notification
  deploy-success:
    name: Deployment Complete
    runs-on: ubuntu-latest
    needs: [goreleaser-build, security-scan]
    if: always() && needs.goreleaser-build.result == 'success'
    steps:
      - name: Report deployment status
        run: |
          if [[ "${{ needs.security-scan.result }}" == "success" ]]; then
            echo "🚀 Deployment completed successfully!"
            echo "✅ Container image built and pushed"
            echo "✅ Security scan completed"
            echo ""
            echo "📋 Deployment Summary:"
            echo "  - Image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}"
            echo "  - Latest: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest"
            echo "  - Platforms: linux/amd64, linux/arm64"
            echo "  - Base: distroless/static-debian12:nonroot"
          else
            echo "⚠️ Deployment completed with warnings"
            echo "✅ Container image built and pushed"
            echo "⚠️ Security scan had issues (check logs)"
          fi
