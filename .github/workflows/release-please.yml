name: Release Please

on:
  push:
    branches: [ main ]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  release-please:
    name: Release Please
    runs-on: ubuntu-latest
    outputs:
      release_created: ${{ steps.release.outputs.release_created }}
      tag_name: ${{ steps.release.outputs.tag_name }}
      version: ${{ steps.release.outputs.version }}
      pr: ${{ steps.release.outputs.pr }}
    steps:
      - name: Release Please
        id: release
        uses: googleapis/release-please-action@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          config-file: release-please-config.json
          manifest-file: .release-please-manifest.json

  build-and-publish:
    name: Build and Publish Release Assets
    runs-on: ubuntu-latest
    needs: release-please
    if: needs.release-please.outputs.release_created
    permissions:
      contents: write
      packages: write
    env:
      GO_VERSION: "1.25"
      REGISTRY: ghcr.io
      IMAGE_NAME: ${{ github.repository }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Dagger
        uses: dagger/dagger-for-github@v7
        with:
          version: "latest"

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build multi-platform binaries
        run: |
          echo "Building release binaries for version ${{ needs.release-please.outputs.version }}"
          
          # Create release directory
          mkdir -p release-assets
          
          # Build for multiple platforms
          platforms=("linux/amd64" "linux/arm64" "darwin/amd64" "darwin/arm64" "windows/amd64")
          
          for platform in "${platforms[@]}"; do
            IFS='/' read -r GOOS GOARCH <<< "$platform"
            echo "Building for $GOOS/$GOARCH..."
            
            # Set binary extension for Windows
            EXT=""
            if [ "$GOOS" = "windows" ]; then
              EXT=".exe"
            fi
            
            # Build with Dagger
            dagger -m github.com/sagikazarmark/daggerverse/go@v0.9.0 call \
              with-platform --platform=$platform \
              with-cgo-disabled \
              build \
              --source=. \
              --pkg=./cmd/server \
              --ldflags="-w -s -X main.version=${{ needs.release-please.outputs.version }}" \
              export --path=./release-assets/image-gallery-${{ needs.release-please.outputs.version }}-${GOOS}-${GOARCH}${EXT}
          done
          
          # List built assets
          ls -la release-assets/

      - name: Create checksums
        run: |
          cd release-assets
          sha256sum * > checksums.txt
          cat checksums.txt

      - name: Build and push release container images
        run: |
          # Build and push versioned image
          dagger call \
            -m github.com/sagikazarmark/daggerverse/go@v0.9.0 \
            with-platform --platform=linux/amd64,linux/arm64 \
            with-cgo-disabled \
            build \
            --source=. \
            --pkg=./cmd/server \
            --ldflags="-w -s -X main.version=${{ needs.release-please.outputs.version }}" \
            container \
            --base-image=gcr.io/distroless/static-debian12:nonroot \
            --binary-name=server \
            with-label org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }} \
            with-label org.opencontainers.image.revision=${{ github.sha }} \
            with-label org.opencontainers.image.version=${{ needs.release-please.outputs.version }} \
            with-label org.opencontainers.image.created=$(date -u +%Y-%m-%dT%H:%M:%SZ) \
            with-label org.opencontainers.image.title=image-gallery \
            with-label org.opencontainers.image.description="Modern Go image gallery application" \
            with-exposed-port 8080 \
            publish --address=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.release-please.outputs.version }}

      - name: Generate release notes
        run: |
          cat > release-notes.md << EOF
          # Image Gallery ${{ needs.release-please.outputs.version }}
          
          ## 🚀 Release Highlights
          
          This release includes the latest features and improvements to the Image Gallery application.
          
          ## 📦 Assets
          
          ### Binaries
          Download the appropriate binary for your platform:
          
          - **Linux AMD64**: \`image-gallery-${{ needs.release-please.outputs.version }}-linux-amd64\`
          - **Linux ARM64**: \`image-gallery-${{ needs.release-please.outputs.version }}-linux-arm64\`
          - **macOS AMD64**: \`image-gallery-${{ needs.release-please.outputs.version }}-darwin-amd64\`
          - **macOS ARM64**: \`image-gallery-${{ needs.release-please.outputs.version }}-darwin-arm64\`
          - **Windows AMD64**: \`image-gallery-${{ needs.release-please.outputs.version }}-windows-amd64.exe\`
          
          ### Container Images
          
          \`\`\`bash
          # Pull the release image
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.release-please.outputs.version }}
          
          # Run the application
          docker run -p 8080:8080 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.release-please.outputs.version }}
          \`\`\`
          
          ### Verification
          
          Verify downloads using the provided checksums:
          \`\`\`bash
          sha256sum -c checksums.txt
          \`\`\`
          
          ## 🛠️ Technology Stack
          
          - **Runtime**: Go ${{ env.GO_VERSION }}
          - **Database**: PostgreSQL with Atlas migrations
          - **Cache**: Valkey (Redis-compatible)
          - **Storage**: S3-compatible (MinIO/AWS)
          - **Container**: Distroless base image
          
          ## 📚 Documentation
          
          - [Development Guide](https://github.com/${{ github.repository }}/blob/${{ needs.release-please.outputs.tag_name }}/docs/DEVELOPMENT.md)
          - [Architecture](https://github.com/${{ github.repository }}/blob/${{ needs.release-please.outputs.tag_name }}/docs/ARCHITECTURE.md)
          - [CI/CD Pipeline](https://github.com/${{ github.repository }}/blob/${{ needs.release-please.outputs.tag_name }}/docs/DAGGER_CI.md)
          - [Security Practices](https://github.com/${{ github.repository }}/blob/${{ needs.release-please.outputs.tag_name }}/docs/SECURITY.md)
          
          ---
          
          🔄 **Generated with Release Please** - [View Changes](https://github.com/${{ github.repository }}/compare/v${{ needs.release-please.outputs.version }}...main)
          EOF

      - name: Upload release assets
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.release-please.outputs.tag_name }}
          body_path: release-notes.md
          files: |
            release-assets/*
          draft: false
          prerelease: false

  security-scan-release:
    name: Security Scan Release Image
    runs-on: ubuntu-latest
    needs: [release-please, build-and-publish]
    if: needs.release-please.outputs.release_created
    permissions:
      security-events: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Dagger
        uses: dagger/dagger-for-github@v7
        with:
          version: "latest"

      - name: Scan release container image
        run: |
          dagger -m github.com/jpadams/daggerverse/trivy@v0.6.0 call \
            scan-image \
            --image-ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.release-please.outputs.version }} \
            --severity=HIGH,CRITICAL \
            --format=sarif > trivy-release-results.sarif

      - name: Upload security scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: trivy-release-results.sarif

      - name: Display security scan results
        run: |
          dagger -m github.com/jpadams/daggerverse/trivy@v0.6.0 call \
            scan-image \
            --image-ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.release-please.outputs.version }} \
            --severity=HIGH,CRITICAL \
            --format=table